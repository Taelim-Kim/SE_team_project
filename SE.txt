package se;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.JOptionPane;

public class SE { //Software Engineer
	static boolean smartState = false; //스마트폰 프레임 상태 (실행 중 or 종료), 다른 클래스에서 사용하려면 static이 붙어야한다.
	static boolean smartLoginState = false; //스마트폰 로그인 상태 (로그인 or 로그 아웃)
	static boolean smartInterworkState = false; //스마트폰 연동 상태 (실행 중 or 종료)
	static MainFrame mf = null;
	static SmartPhoneFrame spf = null;
	
	//정보 - 계좌 (스마트폰과 연동 되어있는데 다른 계좌로 거래할 시 사용 된다.)
	static String userName = null;
	static String userAccountNumber = null;
	static int balance = 0;
	static String benefit = null; 
	
	//정보 - 스마트폰 (연동된 스마트폰의 정보)
	static String userNameSmart = null;
	static String userAccountNumberSmart = null;
	static int balanceSmart = 0;
	static String benefitSmart = null; 
	
	public static void main(String[] args) {
		openSmart(); //스마트폰 프레임 열기
		mf = new MainFrame(); //기본 프레임 (atmPanel, createAccountPanel, shopPanel으로 구성)
	}
	
	//상태 변화 메소드
	static void smartState(boolean state){ //스마트폰 프레임 상태 바꾸기, 디폴트 접근제한자 - 같은 패키지 + 자기 객체 내 #참고 1
		smartState = state;
	}
	
	static void smartLoginState(boolean state){ //스마트폰 로그인 상태 바꾸기
		smartLoginState = state;
		
		if(smartLoginState == false){ //로그아웃하면
			smartInterworkState(false); //연동도 풀린다
		}
	}
	
	static void smartInterworkState(boolean state){ //스마트폰 연동 상태 바꾸기
		smartInterworkState = state;
		
		if(state){ //연동 중..
			SmartPhonePanel.interworkBtn.setText("연동 중..");
		}
		else{
			SmartPhonePanel.interworkBtn.setText("연동하기");
		}
	}
	
	static void openSmart(){ //스마트폰 프레임 열기
		spf = new SmartPhoneFrame(); //메인 프레임의 메뉴에서 사용한다.
	}
	
	static void closeSmart(){ //스마트폰 프레임 닫기, SmartPhoneFrame에서 자세히 다룸
		spf.closeSmart();
	}
	
	//파일 접근 메소드
	static boolean checkUserInfo(String id, String password, boolean smart){ //스마트폰이면 true, 아니면 false
		//고객 정보(userInformation.txt) 확인하기, 올바른 정보면 true, 아니면 false 반환#참고 2
		if(id == null || password == null){ //빈칸이 있으면 false
			return false;
		}
		else{ //고객 정보 확인
			File userInfo = new File("userInformation.txt"); //불러올 파일
			
			try{
				FileReader read = new FileReader(userInfo); //파일 읽기
				BufferedReader rbuf = new BufferedReader(read, 1024); //버퍼버퍼
				String str = null; //버퍼를 받는 문자열
				
				id = id.replace("-", "").trim(); //계좌번호일 수 있어서 - 없애기
				
				while ((str = rbuf.readLine()) != null) { //한 줄 읽어오기 
					String s[] = str.split("\\|"); //구분자로 나누기 (|는 앞에 역슬래시 두 개!)
					//str => s[0] = 고객 명 | s[1] = 계좌 번호 | s[2] = 비밀번호
					
					if(id.trim().equals(s[0]) || id.equals(s[1].replace("-", ""))){ //id를 고객 명과 계좌번호로 비교
						if(password.equals(s[2])){ //비밀번호와 비교
							userName = s[0].trim();
							userAccountNumber = s[1].trim();
							
							if(smart){ //스마트폰이다!
								userNameSmart = userName;
								userAccountNumberSmart = userAccountNumber;
								checkAccountInfo(true); //자세한 정보도 얻자
								smartLoginState(true); //로그인 오케이!
								SmartPhonePanel.setData(); //정보 갱신
							}
							else{ //스마트폰 아님
								checkAccountInfo(false); //자세한 정보도 얻자
							}
							
							return true;
						}
					}
				}
				read.close(); //파일 닫기
				return false; //넌 고객이 아니다!
			}
			catch(FileNotFoundException e){ //파일 없을 때 -> false
				return false;
			}
			catch (IOException e) {
				e.printStackTrace();
				System.out.println("언제 뜨는 오류인가 나중에 지우삼");
				return false; //기타 등등
			}
		}
	}
	
	static boolean checkAccountInfo(boolean smart){ //개인 계좌 정보(계좌번호.txt) 확인하기
		String num = null;
		if(smart){ num = userAccountNumberSmart.replace("-", "").trim(); }
		else{ num = userAccountNumber.replace("-", "").trim(); }
		
		File accountInfo = new File(num + ".txt"); //불러올 파일
		
		try{
			FileReader read = new FileReader(accountInfo); //파일 읽기
			BufferedReader rbuf = new BufferedReader(read, 1024); //버퍼버퍼
			String str = rbuf.readLine(); //개인 정보는 첫 줄에 있다.
			String s[] = str.split("\\|"); //잔액|혜택
			
			balance = Integer.parseInt(s[0]);
			benefit = s[1];
			
			if(smart){
				balanceSmart = balance;
				benefitSmart = benefit;
			}
			
			read.close();
			return true;
		}
		catch(FileNotFoundException e){ //파일 없을 때 -> false
			return false;
		}
		catch (IOException e) {
			e.printStackTrace();
			System.out.println("언제 뜨는 오류인가 나중에 지우삼");
			return false; //기타 등등
		}
		
	}
	
	static void setAccountInfo(String shop, int money, char op, boolean smart){ //계좌 내역 수정
		File accountInfo = null;
		String text = null;
		
		if(smart){
			if(op == '+'){ balanceSmart += money; } //입금!
			else{ balanceSmart -= money; } //출금!
			
			accountInfo = new File(userAccountNumberSmart.replace("-", "") + ".txt"); //저장할 파일 (입출금|돈|내역)
			text = balanceSmart + "|" + benefitSmart + "\r\n"; //바꿀 내용
		}
		else{
			if(op == '+'){ balance += money; } //입금!
			else{ balance -= money; } //출금!
			
			accountInfo = new File(userAccountNumber.replace("-", "") + ".txt"); //저장할 파일 (입출금|돈|내역)
			text = balance + "|" + benefit + "\r\n"; //바꿀 내용
		}
		
		try{ //쭉 읽은 뒤 다시 저장
			//읽는 중..
			FileReader read = new FileReader(accountInfo); //파일 읽기
			BufferedReader rbuf = new BufferedReader(read, 1024); //버퍼버퍼
			String str = rbuf.readLine(); //첫 줄은 바꿔줘야 해서 생략
				
			while((str = rbuf.readLine()) != null){ //한 줄 씩 읽기
				text += str + "\r\n"; //저장저장
			} //다 읽음
				
			//마지막에 내역 추가
			if(op == '+'){ text += "입금|"; } //입금!
			else{ text += "출금|"; } //출금!
			text += money + "|" + shop + "|" + "현재 날짜 + 시간\r\n";
				
			read.close();
				
			//쓰는 중..
			FileWriter write = new FileWriter(accountInfo); //파일 쓰기
			write.write(text); //붙여넣기
				
			write.close();
		}
		catch(FileNotFoundException e){ } //파일 없을 때 -> false
		catch (IOException e) {
			e.printStackTrace();
			System.out.println("언제 뜨는 오류인가 나중에 지우삼");
		}
	}
	
	static boolean smartPhonePay(String shop, int price){ //거래 진행 + 영수증 반환
		if(balance < price){ //잔액 부족
			JOptionPane.showMessageDialog(mf, "계좌의 잔액이 부족합니다", "결제 오류", JOptionPane.WARNING_MESSAGE);
			return false;
		}
		else{
			//혜택 확인 thisShopBenefit
			
			String bill = "거래처 명 : " + shop +
						  "\r\n거래자 명 : " + userName + 
						  "\r\n결제 일 : " + "^^" + 
						  "\r\n합   계 : " + price + 
						  "\r\n할인 금액 : " + "**" +
						  "\r\n(혜택" + ")" +
						  "\r\n결제 금액 : " + price;
			
			JOptionPane.showMessageDialog(mf, bill, "영수증", JOptionPane.INFORMATION_MESSAGE); //메인 프레임에 팝업
			smartPhoneMessage(price, '-'); //스마트폰에 팝업
			
			setAccountInfo(shop, price, '-', true); //계좌 내역 수정
			SmartPhonePanel.setData(); //정보 갱신
			return true;
		}
	}
	
	static void smartPhoneMessage(int money, char op){ //스마트폰에 팝업 띄우기
		if(op == '+'){ //입금
			JOptionPane.showMessageDialog(spf, money + "원이 입금 되었습니다", "거래 알람", JOptionPane.INFORMATION_MESSAGE);
		}
		else if(op == '-'){ //출금
			JOptionPane.showMessageDialog(spf, money + "원이 출금 되었습니다", "거래 알람", JOptionPane.INFORMATION_MESSAGE);
		}
	}
}

/*
참고 1 접근 제한자 설명
	http://bvc12.tistory.com/139
참고 2 userInformation.txt = 고객 정보가 들어 있는 파일
	String 고객 명 | String 계좌 번호 (-미포함) | String 비밀번호 (4자리)
*/